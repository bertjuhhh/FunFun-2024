import serial
import time

# Initialiseer seriële verbinding voor de USB naar DMX-interface
# Vervang '/dev/ttyUSB0' door het correcte apparaat als dat anders is
dmx_serial = serial.Serial('/dev/ttyUSB0', baudrate=250000, bytesize=8, parity='N', stopbits=2)

def send_dmx_data(channel_data):
    # Stuur een break (minimaal 88µs laag)
    dmx_serial.break_condition = True
    time.sleep(0.0001)
    dmx_serial.break_condition = False
    
    # Stuur een Mark After Break (MAB, minimaal 8µs hoog)
    time.sleep(0.00001)

    # Startcode (0 voor DMX data)
    dmx_serial.write(b'\x00')

    # DMX kanaaldata
    dmx_serial.write(bytearray(channel_data))

    # Zorg ervoor dat er ten minste 512 bytes (kanalen) worden verzonden
    if len(channel_data) < 512:
        dmx_serial.write(b'\x00' * (512 - len(channel_data)))

def dim_channel(dmx_channel, duration):
    steps = 100
    step_delay = duration / steps
    for i in range(steps + 1):
        value = int((i / steps) * 255)
        channel_data[dmx_channel - 1] = value  # DMX channels are 1-based, list indices are 0-based
        send_dmx_data(channel_data)
        time.sleep(step_delay)
    time.sleep(1)
    for i in range(steps + 1):
        value = int(((steps - i) / steps) * 255)
        channel_data[dmx_channel - 1] = value
        send_dmx_data(channel_data)
        time.sleep(step_delay)

# Initialize DMX data array with zeros for 512 channels
channel_data = [0] * 512

# DMX channels to control (change these as needed)
dmx_channels = [1, 2, 3, 4]

while True:
    for channel in dmx_channels:
        dim_channel(channel, 5)
